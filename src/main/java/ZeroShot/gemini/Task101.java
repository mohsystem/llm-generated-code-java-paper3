package ZeroShot.gemini;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;

public class Task101 {

    /**
     * Creates a file with the given name, writes a simple shell script content to it,
     * and makes it executable for the owner. This operation is mostly relevant for POSIX-like
     * operating systems (Linux, macOS).
     *
     * @param filename The name of the file to create.
     * @return true if the file was created and made executable successfully, false otherwise.
     */
    public static boolean createAndMakeExecutable(String filename) {
        // A simple, safe script content.
        String content = "#!/bin/bash\n"
                       + "# A simple script generated by a Java program.\n"
                       + "echo \"Hello from script.sh! Execution successful.\"\n";
        Path path = Paths.get(filename);

        try {
            // Write content to the file, creating it if it doesn't exist, or overwriting it if it does.
            Files.write(path, content.getBytes(StandardCharsets.UTF_8));

            // Use the portable java.io.File.setExecutable method.
            // The first boolean is for the 'executable' flag.
            // The second boolean 'ownerOnly' restricts the permission change to the owner.
            File file = path.toFile();
            if (file.setExecutable(true, true)) {
                 return true;
            } else {
                 System.err.println("Warning: setExecutable returned false. The OS may not support this operation or it may have failed.");
                 // On some OSes, this might return false but the operation might have succeeded.
                 // We can re-check the permission as a fallback.
                 return file.canExecute();
            }

        } catch (IOException e) {
            System.err.println("An I/O error occurred: " + e.getMessage());
            return false;
        } catch (SecurityException e) {
            System.err.println("A security error occurred: " + e.getMessage());
            return false;
        }
    }
    
    private static void runTest(String filename, String testName) {
        System.out.println("\n" + testName);
        if (createAndMakeExecutable(filename)) {
            System.out.println("-> Success: Created and made '" + filename + "' executable.");
            File file = new File(filename);
            if (file.exists() && file.canExecute()) {
                System.out.println("-> Verification: File is executable by the owner.");
            } else {
                System.out.println("-> Verification: File is NOT executable or does not exist.");
            }
        } else {
            System.out.println("-> Failure: Could not create and make '" + filename + "' executable.");
        }
    }

    public static void main(String[] args) {
        String filename = "script.sh";
        System.out.println("--- Java Test Cases ---");

        // Test Case 1: Initial creation
        runTest(filename, "Test Case 1: Initial creation of " + filename);

        // Test Case 2: Attempt to create again (should overwrite and set permissions again)
        runTest(filename, "Test Case 2: Overwriting " + filename);

        // Test Case 3: Delete the file to test re-creation
        System.out.println("\nTest Case 3: Deleting the file");
        try {
            Files.delete(Paths.get(filename));
            System.out.println("-> Success: File '" + filename + "' deleted.");
        } catch (IOException e) {
            System.err.println("-> Failure: Could not delete file: " + e.getMessage());
        }

        // Test Case 4: Re-create the file after deletion
        runTest(filename, "Test Case 4: Re-creating the file " + filename);
        
        // Test Case 5: Final cleanup
        System.out.println("\nTest Case 5: Final cleanup");
        try {
            Files.deleteIfExists(Paths.get(filename));
            System.out.println("-> Success: Cleanup complete.");
        } catch (IOException e) {
            System.err.println("-> Failure: Cleanup failed: " + e.getMessage());
        }
    }
}